library(factoextra)
library(sf)
# Chunk 3: Importing Data
#data is just imported here. Script for preprocessing and other wrangling and
#imports from the Spotify API located in this folder under
#Spotify_get_script.R
billboard <- read_csv("data/spotify_full_100_10s.csv") %>%
rename(id = id...12)
# Chunk 4: Viewing the data
billboard %>%
distinct(id, .keep_all = TRUE) %>%
group_by(album.name) %>%
hchart(type = "scatter", hcaes(energy, valence, group = album.name)) %>%
hc_legend(verticalAlign = "left", layout = "horizontal", x = 30, y = 15, fontSize = "10px") %>%
hc_title(text = "Happiness vs. Energeticness of the Top 100 Albums", align = "center")
# Chunk 5: Spatial Visualization
#Getting the country codes
countries <- read_csv("data/country_codes.csv")
#Converting to a shape Object
new_data <- billboard %>%
left_join(y = countries, by = "country") %>%
group_by(album.name, country) %>%
summarise_if(is.numeric, mean) %>%
ungroup() %>%
st_as_sf(coords = c("Latitude", "Longitude"))
#Plotting countries in the world
hcmap(map = "custom/world-robinson-lowres",
data = new_data,
name = "Happiness of Music (Valence)",
value = "valence",
borderWidth = 0,
nullColor = "#d3d3d3") %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::magma(10, begin = 0.1)),
type = "logarithmic"
) %>%
hc_title(text = "Happiness of the Billboard Top 100 Albums Available Around the World")
?svd
library(tidyverse)
library(highcharter)
library(factoextra)
library(sf)
library(caret)
??`caret
j
asd
f
asdf
a
sdfeo
''
;;;;;
?caret
??caret
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric)
View(model_ready)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric)
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~., data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl
)
lm_spotify$results
lm_spotify$finalModel
summary(lm_spotify$finalModel)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~., data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
summary(lm_spotify$finalModel)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
# select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~., data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
summary(lm_spotify$finalModel)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
# select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~., data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~., data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
summary(lm_spotify$finalModel)
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~ danceability + energy * loudness * acousticness + speechiness +
tempo + instrumentalness + liveness + key, data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
summary(lm_spotify$finalModel)
summary(lm_spotify$finalModel)
#getting the years of release for the plots
billboard <- billboard %>%
mutate(year = lubridate::year(release_date))
View(billboard)
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year))
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) +
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year))
library(tidyverse)
library(highcharter)
library(factoextra)
library(sf)
library(caret)
library(lubridate)
library(patchwork)
set.seed(543)
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) +
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year))
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year))
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year))
summary(lm_spotify$finalModel)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year), colors = viridisLite::plasma)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year), color = viridisLite::plasma)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year, color = viridisLite::plasma))
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year, color = unique)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year, color = unique))
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year, color = unique))
summary(lm_spotify$finalModel)
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year))
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year))
hchart(billboard_year, "scatter", hcaes(x = speechiness, y = valence, group = year))
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) %>%
hc_title("Valence and Danceability")
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year)) %>%
hc_title("Valence and Energy")
hchart(billboard_year, "scatter", hcaes(x = speechiness, y = valence, group = year)) %>%
hc_title("Valence and Energy")
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) %>%
hc_title(text = "Valence and Danceability")
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
hchart(billboard_year, "scatter", hcaes(x = speechiness, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Libraries
library(tidyverse)
library(highcharter)
library(factoextra)
library(sf)
library(caret)
library(lubridate)
library(patchwork)
set.seed(543)
# Chunk 3: Importing Data
#data is just imported here. Script for preprocessing and other wrangling and
#imports from the Spotify API located in this folder under
#Spotify_get_script.R
billboard <- read_csv("data/spotify_full_100_10s.csv") %>%
rename(id = id...12)
# Chunk 4: Viewing the data
billboard %>%
distinct(id, .keep_all = TRUE) %>%
group_by(album.name) %>%
hchart(type = "scatter", hcaes(energy, valence, group = album.name)) %>%
hc_legend(verticalAlign = "left", layout = "horizontal", x = 30, y = 15, fontSize = "10px") %>%
hc_title(text = "Happiness vs. Energeticness of the Top 100 Albums", align = "center")
# Chunk 5: Spatial Visualization
#Getting the country codes
countries <- read_csv("data/country_codes.csv")
#Converting to a shape Object
new_data <- billboard %>%
left_join(y = countries, by = "country") %>%
group_by(album.name, country) %>%
summarise_if(is.numeric, mean) %>%
ungroup() %>%
st_as_sf(coords = c("Latitude", "Longitude"))
#Plotting countries in the world
hcmap(map = "custom/world-robinson-lowres",
data = new_data,
name = "Happiness of Music (Valence)",
value = "valence",
borderWidth = 0,
nullColor = "#d3d3d3") %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::magma(10, begin = 0.1)),
type = "logarithmic"
) %>%
hc_title(text = "Happiness of the Billboard Top 100 Albums Available Around the World")
# Chunk 6: GLM
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
distinct(id, .keep_all = TRUE) %>%
select_if(is.numeric) %>%
select(-c("tag_freq"))
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~ danceability + energy * loudness * acousticness + speechiness +
tempo + instrumentalness + liveness + key, data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
# Chunk 7
summary(lm_spotify$finalModel)
# Chunk 8
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date)) %>%
distinct(id, .keep_all = TRUE)
# plotting individual relationships as a scatter plot
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) %>%
hc_title(text = "Valence and Danceability")
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
hchart(billboard_year, "scatter", hcaes(x = speechiness, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
predictions <- predict(lm_spotify$finalModel, billboard$valence)
predictions <- predict(lm_spotify$finalModel, billboard)
?predict
predictions <- predict(lm_spotify, billboard)
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
predictions
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions))
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point()
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = predictions, y = valence)) +
geom_point()
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth(method = "lm")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth(method = "lm") +
geom_minimal()
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
hchart(billboard_year, "scatter", hcaes(x = valence, y = predictions, group = artist.name)) %>%
hc_title(text = Predictions vs Observations)
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
hchart(billboard_year, "scatter", hcaes(x = valence, y = predictions, group = artist.name)) %>%
hc_title(text = "Predictions vs Observations")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
hchart(billboard, "scatter", hcaes(x = valence, y = predictions, group = artist.name)) %>%
hc_title(text = "Predictions vs Observations")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
hchart(billboard, "scatter", hcaes(x = valence, y = predictions)) %>%
hc_title(text = "Predictions vs Observations")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(x = "Valence", y = "Predictions", title = "Predictions vs. Observations of Happiness in Music")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth() +
theme_minimal() +
labs(x = "Valence", y = "Predictions", title = "Predictions vs. Observations of Happiness in Music")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(x = "Valence", y = "Predictions", title = "Predictions vs. Observations of Happiness in Music")
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point(color= "orange") +
geom_smooth(method = "lm") +
theme_minimal() +
labs(x = "Valence", y = "Predictions", title = "Predictions vs. Observations of Happiness in Music")
?distinct
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
install.packages("lastfmR")
remotes::install_github("ppatrzyk/lastfmR")
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
View(full_tracks_df)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/Spotify_get_script.R', echo=TRUE)
tags <- read_csv("data/tags.csv")
#Getting appropriate tags
tags <- tags %>%
filter(tag_freq == 100)
# Joining Dataframes ------------------------------------------------------
#renaming the artist name column for a join
colnames(tags)[1] <- "artist.name"
#joining the tags dataframe with the full data
full_dataset <- left_join(full_dataset, tags, by = "artist.name")
full_dataset <- full_dataset[!duplicated(full_dataset["track.name"]),]
# Collecting and Exporting ------------------------------------------------
#Lets unnest the countries and rename the resulting column
final_dataset <- full_dataset %>%
mutate(available_markets = map(available_markets, as_tibble)) %>%
unnest(cols = c(available_markets)) %>%
rename(country = value) %>%
select(-c(genres, tag_freq)) %>%
rename(id = id...12)
#getting a csv without the countries column
final_no_countries %>% final_dataset %>%
distinct(id, .keep_all = TRUE) %>%
select(-c(country))
#writing this data to a csv for later use
write_csv(final_dataset, "data/spotify_full_100_10s.csv")
write_csv(final_no_countries, "data/spotify_100_no_geo.csv")
beepr::beep("coin")
#getting a csv without the countries column
final_no_countries <- final_dataset %>%
distinct(id, .keep_all = TRUE) %>%
select(-c(country))
#writing this data to a csv for later use
write_csv(final_dataset, "data/spotify_full_100_10s.csv")
write_csv(final_no_countries, "data/spotify_100_no_geo.csv")
beepr::beep("coin")
View(final_no_countries)
# Collecting and Exporting ------------------------------------------------
#Lets unnest the countries and rename the resulting column
final_dataset <- full_dataset %>%
mutate(available_markets = map(available_markets, as_tibble)) %>%
unnest(cols = c(available_markets)) %>%
rename(country = value) %>%
select(-c(genres, tag_freq)) %>%
rename(id = id...12) %>%
rename(artist_name = artist.name) %>%
rename(track_name = track.name) %>%
rename(album_name = album.name)
#getting a csv without the countries column
final_no_countries <- final_dataset %>%
distinct(id, .keep_all = TRUE) %>%
select(-c(country))
#writing this data to a csv for later use
write_csv(final_dataset, "data/spotify_full_100_10s.csv")
write_csv(final_no_countries, "data/spotify_100_no_geo.csv")
beepr::beep("coin")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Libraries
#plotting and wrangling
library(tidyverse)
library(highcharter)
library(factoextra)
library(patchwork)
library(sf)
#ml/modeling
library(caret)
#working with time variables
library(lubridate)
#setting the seed for reproducability
set.seed(543)
# Chunk 3: Importing Data
#data is just imported here. Script for preprocessing and other wrangling and
#imports from the Spotify API located in this folder under
#Spotify_get_script.R
billboard <- read_csv("data/spotify_full_100_10s.csv")
# Chunk 4: Viewing the data
billboard %>%
group_by(album_name) %>%
hchart(type = "scatter", hcaes(energy, valence, group = album_name)) %>%
hc_legend(verticalAlign = "left", layout = "horizontal", x = 30, y = 15, fontSize = "10px") %>%
hc_title(text = "Happiness vs. Energeticness of the Top 100 Albums", align = "center")
# Chunk 5: Spatial Visualization
#Getting the country codes
countries <- read_csv("data/country_codes.csv")
#Converting to a shape Object
new_data <- billboard %>%
left_join(y = countries, by = "country") %>%
group_by(album_name, country) %>%
summarise_if(is.numeric, mean) %>%
ungroup() %>%
st_as_sf(coords = c("Latitude", "Longitude"))
#Plotting countries in the world
hcmap(map = "custom/world-robinson-lowres",
data = new_data,
name = "Happiness of Music (Valence)",
value = "valence",
borderWidth = 0,
nullColor = "#d3d3d3") %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::magma(10, begin = 0.1)),
type = "logarithmic"
) %>%
hc_title(text = "Happiness of the Billboard Top 100 Albums Available Around the World")
# Chunk 6: GLM
#selecting all of the numeric attributes for a linear model
model_ready <- billboard %>%
select_if(is.numeric)
# Setting up cross validation
ctrl <- trainControl(method = "cv", number = 10)
# trying to model the relationship between happiness and the other variables
lm_spotify <- train(valence ~ danceability + energy * loudness * acousticness + speechiness +
tempo + instrumentalness + liveness + key, data = model_ready,
method = "lm",
preProc = c("scale", "center"),
trControl = ctrl)
# Chunk 7
summary(lm_spotify$finalModel)
# Chunk 8
#getting the years of release for the plots
billboard_year <- billboard %>%
mutate(year = lubridate::year(release_date))
# plotting individual relationships as a scatter plot
hchart(billboard_year, "scatter", hcaes(x = danceability, y = valence, group = year)) %>%
hc_title(text = "Valence and Danceability")
hchart(billboard_year, "scatter", hcaes(x = energy, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
hchart(billboard_year, "scatter", hcaes(x = speechiness, y = valence, group = year)) %>%
hc_title(text = "Valence and Energy")
# Chunk 9
#predicting the values of valence with the models
predictions <- predict(lm_spotify, billboard)
ggplot(billboard, aes(x = valence, y = predictions)) +
geom_point(color= "orange") +
geom_smooth(method = "lm") +
theme_minimal() +
labs(x = "Valence", y = "Predictions", title = "Predictions vs. Observations of Happiness in Music")
